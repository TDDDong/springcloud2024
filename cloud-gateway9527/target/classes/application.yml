server:
  port: 9527

spring:
  application:
    name: cloud-gateway #以微服务注册进consul或nacos服务列表内
  cloud:
    consul: #配置consul地址
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true
        service-name: ${spring.application.name}
    gateway:
      routes:
        - id: pay_routh1 #pay_routh1                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
          #uri: http://localhost:8001                #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service          #匹配后提供服务的路由地址 (lb开头表示支持负载均衡)  根据服务名查找 无论服务的ip或端口是否改变 只要有注册到服务中心 都能找到
          predicates:
            - Path=/pay/gateway/get/**              # 断言，路径相匹配的进行路由
            - After=2024-06-17T20:53:53.433502700+08:00[Asia/Shanghai] # 在这个时间后才可以访问   ZonedDateTime.now() 时间通过该类获取
            #- Before=2024-06-17T20:53:53.433502700+08:00[Asia/Shanghai] # 在这个时间前才可以访问
            #- Between=2024-06-17T20:53:53.433502700+08:00[Asia/Shanghai], 2024-06-17T20:57:30.433502700+08:00[Asia/Shanghai] # 在这个时间之间才可以访问
            #- Cookie=username,dd  #携带cookie访问 key/value形式
            #- Header=X-Request-Id, \d+  # 请求头要有X-Request-Id属性并且值为整数的正则表达式
            #- Host=**.dd.com #请求头要携带Host：**.dd.com的格式
            #- Query=username, \d+  # 要有参数名username并且值还要是整数才能路由
            #- RemoteAddr=192.168.42.1/24 # 外部访问我的IP限制，最大跨度不超过32，目前是1~24它们是 CIDR 表示法。 （不能再使用localhost访问 得按CIDR要求的ip访问）
            #- My=diamond #自定义断言配置   短促写法
#            - name: My                  #全格式写法
#              args:
#                userType: diamond


        - id: pay_routh2 #pay_routh2                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
          #uri: http://localhost:8001                #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service          #匹配后提供服务的路由地址 (lb开头表示支持负载均衡)
          predicates:
            - Path=/pay/gateway/info/**              # 断言，路径相匹配的进行路由

        - id: pay_routh3 #pay_routh3
          uri: lb://cloud-payment-service                #匹配后提供服务的路由地址
          predicates:
            - Path=/pay/gateway/filter/**              # 断言，路径相匹配的进行路由  之前正确的地址
            #- Path=/gateway/filter/**              # （1）断言，为配合PrefixPath测试过滤，暂时注释掉/pay  与filters中的（1）对应
            #- Path=/XYZ/abc/{segment}           # （2） 断言，为配合SetPath测试，{segment}的内容最后被SetPath取代
          filters:
            # 请求头参数相关
            #- AddRequestHeader=X-Request-dd1,ddValue1  # 请求头kv，若一头含有多参则重写一行设置
            #- AddRequestHeader=X-Request-dd2,ddValue2
            #- RemoveRequestHeader=sec-fetch-site       # 删除请求头sec-fetch-site
            #- SetRequestHeader=sec-fetch-mode, Blue-updatebydd  # 将请求头sec-fetch-mode对应的值修改为Blue-updatebydd
            # 请求参数相关
            #- AddRequestParameter=customerId,9527001   # 新增请求参数Parameter：k ，v  如果请求中也携带对应key/value键值对 则以请求携带参数为准
            #- RemoveRequestParameter=customerName      # 删除url请求参数customerName，你传递过来也是null
            # 响应头参数相关
            #- AddResponseHeader=X-Response-dd, BlueResponse # 新增请求参数X-Response-dd并设值为BlueResponse
            #- SetResponseHeader=Date,2099-11-11 # 设置回应头Date值为2099-11-11
            #- RemoveResponseHeader=Content-Type # 将默认自带Content-Type回应属性删除
            # 前缀路径
            #- PrefixPath=/pay    #（1） http://localhost:9527/pay/gateway/filter 相当于拆分成 prefixPath + path
            # 设置路径
            #- SetPath=/pay/gateway/{segment}  # {segment}表示占位符  断言中占位符会被替换为filters中的setPath后面的路径
            # 重定向
            #- RedirectTo=302, https://www.baidu.com/  # 访问http://localhost:9527/pay/gateway/filter跳转到https://www.baidu.com/
            # 自定义单一过滤器
            - My=dd
